---
import ProjectBoard from "../components/projectBoard/projectBoard.astro";
import TaskBoard from "../components/taskBoard/taskBoard.astro";

import '../styles/global.css'
import {serverURL} from "./conf";
import BoardHeader from "../components/boardHeader.astro";

const sessionCookie = Astro.cookies.get('sessionId');
if (!sessionCookie) {
    // Handle the missing cookie case (e.g., redirect to login or show an error)
    return Astro.redirect('/getCookies');
}
let sessionId = sessionCookie.value;

const response = await fetch(`${serverURL}/boards/boards/get`, {
    // gets all the boards a user has access to
    // gets their BoardID and BoardName
    method: 'POST', headers: {'Content-Type': 'application/json'}, body: JSON.stringify({sessionId: sessionId})
});

const {data: boards} = await response.json();

// Get current URL and check for boardId parameter
const url = new URL(Astro.request.url);
const boardIdParam = url.searchParams.get('boardId');

console.log('Board ID Param:', boardIdParam);
/* Redirect to first board if no boardId is present and boards exist
if (!boardIdParam && boards?.length > 0) {
    const firstBoardId = boards[0][0].boardID;
    return Astro.redirect(`boards?boardId=${firstBoardId}`);
}
*/
if (boards === null || boards === undefined) {
    console.log('Boards data is null or undefined');
} else {
    let boardList = [];
    for (let task of boards) {
        for (let key of task) {
            boardList.push(key);
        }
    }
    console.log("boards: ", boards);
}
---

<!DOCTYPE html>
<html lang="de">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>TaskRonaut</title>
    <link rel="icon" type="image/x-icon" href="/favicon.svg"/>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.7.2/css/all.min.css"
          integrity="sha512-Evv84Mr4kqVGRNSgIGL/F/aIDqQb7xQ2vcrdIwxfjThSH8CSR7PBEakCr51Ck+w+/U6swU2Im1vVX0SVk9ABhg=="
          crossorigin="anonymous" referrerpolicy="no-referrer"/>
</head>

<body>
<script>
    import 'htmx.org';
    import Alpine from 'alpinejs';
    import {serverURL} from "./conf";

    Alpine.data('boardCreation', () => ({
        showHeaderInput: false, showCardInput: false, boardName: '', async createBoard() {
            if (!this.boardName.trim()) return;
            try {
                const response = await fetch(`${serverURL}/boards/boards/`, {
                    method: 'POST', headers: {'Content-Type': 'application/json'}, body: JSON.stringify({
                        sessionId: sessionId, boardName: this.boardName
                    })
                });

                if (response.ok) {
                    window.location.reload();
                } else {
                    console.error('Board creation failed');
                }
            } catch (error) {
                console.error('Error:', error);
            }
        }
    }));

    Alpine.start();

    import {sessionId} from './user.js';
    import {clientURL} from './conf.js';

    if (document.cookie.includes('sessionId') === null) {
        window.location.href = `/getCookies`;
    }

    if (sessionId === null) {
        window.location.href = `/login`;
    }

</script>
<div class="board-container">
    {!boardIdParam ? (
            <div class="boards-overview" x-data="boardCreation">
                <div style="padding-bottom: 20px">
                    <BoardHeader {boards}></BoardHeader>
                </div>
                <div class="boards-grid">
                    {boards?.map((boardGroup) => (boardGroup.map((board) => (
                                    <div class="your-boards-card">
                                        <p>
                                            {board.boardName}
                                        </p>
                                        <a href=`/boards?boardId=${board.boardID}`>
                                            GO TO BOARD
                                        </a>
                                    </div>))))}

                    <!--     Card Input -->
                    <template x-if="!showCardInput">
                        <div class="board-card add-board" @click="showCardInput = true">
                            <div class="add-content">
                                <i class="fas fa-plus"></i>
                                <span>Create New Board</span>
                            </div>
                        </div>
                    </template>

                    <template x-if="showCardInput">
                        <div class="board-card">
                            <div class="input-group">
                                <input
                                        type="text"
                                        x-model="boardName"
                                        @keyup.enter="createBoard()"
                                        placeholder="Board name"
                                        class="board-input"
                                        autofocus
                                />
                                <div class="button-group">
                                    <button @click="createBoard()" class="submit-btn">
                                        Create
                                    </button>
                                    <button @click="showCardInput = false; boardName = ''"
                                            class="cancel-btn">
                                        Cancel
                                    </button>
                                </div>
                            </div>
                        </div>
                    </template>
                </div>
            </div>) : (
            <main class="content" x-data="{ showProjectBoard: false }">
                <div class="main">
                    <!-- Render TaskBoard immediately with x-show -->
                    <div class="board scrollable" x-show="!showProjectBoard">
                        <ProjectBoard boardID={boardIdParam}/>
                    </div>

                    <!-- Render ProjectBoard on demand -->
                    <template x-if="showProjectBoard">
                        <div class="board scrollable">
                            <TaskBoard boardID={boardIdParam}/>
                        </div>
                    </template>
                </div>
            </main>)}
</div>

<style lang="scss">
  .your-boards-card {
    background: var(--foreground);
    color: var(--copy);
    border-radius: 12px;
    padding: 1.5rem;
    min-height: 150px;
    cursor: pointer;
    transition: all 0.2s ease;
    position: relative;
    overflow: hidden;
    display: flex;
    flex-direction: column;
    justify-content: space-between;

    &:hover {
      transform: translateY(-5px);
      box-shadow: 0 8px 24px rgba(0, 0, 0, 0.1);
    }

    p {
      margin: 0;
      color: var(--copy);
      font-size: 1.2rem;
      font-weight: 500;
    }

    a {
      color: #3b82f6;
      text-decoration: none;
      font-weight: 600;
      margin-top: 1rem;
      align-self: flex-end;

      &:hover {
        text-decoration: underline;
      }
    }
  }


  .board-container {
    min-height: 100vh;
    background: linear-gradient(135deg, var(--primary), #334155);
  }

  .boards-overview {
    margin: 0 auto;

    .header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-bottom: 2rem;
      width: 100%;

      .creation-flow {
        transform: translateX(-20px);
      }

      h1 {
        color: white;
        font-size: 2rem;
        margin: 0;
      }
    }
  }

  .boards-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
    gap: 1.5rem;
    padding: 0 5%;
  }

  .board-card {
    background: rgba(255, 255, 255, 0.95);
    border-radius: 12px;
    padding: 1.5rem;
    min-height: 150px;
    cursor: pointer;
    transition: all 0.2s ease;
    position: relative;
    overflow: hidden;

    &:hover {
      transform: translateY(-5px);
      box-shadow: 0 8px 24px rgba(0, 0, 0, 0.1);

      .card-overlay {
        opacity: 1;
      }
    }

    h3 {
      margin: 0;
      color: #1e293b;
    }

    &.add-board {
      background: rgba(255, 255, 255, 0.8);
      border: 2px dashed #cbd5e1;
      display: flex;
      align-items: center;
      justify-content: center;
      text-align: center;

      .add-content {
        color: #64748b;

        i {
          font-size: 1.5rem;
          margin-bottom: 0.5rem;
        }

        span {
          display: block;
          font-weight: 500;
        }
      }

      &:hover {
        background: rgba(255, 255, 255, 0.95);
        border-color: #94a3b8;
      }
    }
  }

  .board-card .input-group {
    display: flex;
    flex-direction: column;
    gap: 1rem;
    height: 100%;
    justify-content: center;
  }

  .board-card .button-group {
    display: flex;
    gap: 0.5rem;
    justify-content: flex-end;
  }

  .card-overlay {
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: rgba(79, 70, 229, 0.9);
    display: flex;
    align-items: center;
    justify-content: center;
    opacity: 0;
    transition: opacity 0.2s ease;

    .open-board-btn {
      background: none;
      border: 2px solid white;
      color: white;
      padding: 0.5rem 1rem;
      border-radius: 6px;
      cursor: pointer;

      &:hover {
        background: rgba(255, 255, 255, 0.1);
      }
    }
  }

</style>
</body>
</html>