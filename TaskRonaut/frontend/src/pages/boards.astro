---
import ProjectBoard from "../components/projectBoard/projectBoard.astro";
import TaskBoard from "../components/taskBoard/taskBoard.astro";
import '../styles/global.css'
import {serverURL} from "./conf";
import BoardHeader from "../components/boardHeader.astro";

const sessionCookie = Astro.cookies.get('sessionId');
if (!sessionCookie) {
    return Astro.redirect('/getCookies');
}
let sessionId = sessionCookie.value;

const response = await fetch(`${serverURL}/boards/get`, {
    method: 'POST', headers: {'Content-Type': 'application/json'}, body: JSON.stringify({sessionId: sessionId})
});

const {data: boards} = await response.json();

const url = new URL(Astro.request.url);
const boardIdParam = url.searchParams.get('boardId');

console.log('Board ID Param:', boardIdParam);

if (boards === null || boards === undefined) {
    console.log('Boards data is null or undefined');
    // Check if the URL has a boardId parameter
    if (boardIdParam !== null) {
        // Redirect to /boards without the boardId parameter
        return Astro.redirect('/boards');
    }
} else {
    let boardList = [];
    for (let task of boards) {
        for (let key of task) {
            boardList.push(key);
        }
    }
    console.log("boards: ", boards);
}
---

<!DOCTYPE html>
<html lang="de">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>TaskRonaut</title>
    <link rel="icon" type="image/x-icon" href="/favicon.svg"/>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.7.2/css/all.min.css"
          integrity="sha512-Evv84Mr4kqVGRNSgIGL/F/aIDqQb7xQ2vcrdIwxfjThSH8CSR7PBEakCr51Ck+w+/U6swU2Im1vVX0SVk9ABhg=="
          crossorigin="anonymous" referrerpolicy="no-referrer"/>
</head>

<body>
<div class="board-container">
    {!boardIdParam ? (
            <div class="boards-overview" x-data="boardCreation">
                <div style="padding-bottom: 20px">
                    <BoardHeader {boards}></BoardHeader>
                </div>
                <div class="boards-grid">
                    {boards?.map((boardGroup) => (boardGroup.map((board) => (
                            <div id=`board-${board.boardID}` class="your-boards-card"
                                 x-data=`{
                            isDropdownOpen: false,
                            isRenaming: false,
                            newBoardName: "${board.boardName}",
                            fetchUpdateBoard() {
                                if (!this.newBoardName.trim()) return;
                                fetch("${serverURL}/boards/update", {
                                    method: "PATCH",
                                    headers: { "Content-Type": "application/json" },
                                    body: JSON.stringify({
                                        sessionId: "${sessionId}",
                                        boardId: "${board.boardID}",
                                        boardName: this.newBoardName
                                    })
                                    }).then(() => window.location.reload());
                                    this.isRenaming = false;
                                }
                            }`
                            >
                                <h1 style="margin: 0">{board.boardName}</h1>

                                <!-- Dropdown trigger -->
                                <button class="dropdown-trigger" @click="isDropdownOpen = !isDropdownOpen">
                                    <i class="fas fa-ellipsis-v"></i>
                                </button>

                                <!-- Dropdown menu -->
                                <div class="dropdown-menu"
                                     x-show="isDropdownOpen"
                                     x-cloak
                                     @click.away="isDropdownOpen = false"
                                     style="position: absolute; right: 10px; top: 35px;">

                                    <div x-show="!isRenaming">
                                        <!-- Update Name button -->
                                        <button class="dropdown-item"
                                                @click=`isRenaming = true; newBoardName = "${board.boardName}"`>
                                            Umbenennen
                                        </button>

                                        <!-- Delete button (HTMX) -->
                                        <button class="dropdown-item delete"
                                                hx-delete=`${serverURL}/boards/delete`
                                                hx-headers='{"Content-Type": "application/json"}'
                                                hx-vals=`js:{ sessionId: "${sessionId}", boardId: "${board.boardID}" }`
                                                hx-trigger="click"
                                                hx-swap="delete"
                                                hx-target=`#board-${board.boardID}`
                                        >
                                            Löschen
                                        </button>
                                    </div>

                                    <div x-show="isRenaming" class="rename-form">
                                        <input type="text"
                                               x-model="newBoardName"
                                               class="rename-input"
                                               @keyup.enter="$event.stopPropagation(); fetchUpdateBoard()"
                                               autofocus>
                                        <div class="rename-buttons">
                                            <button class="dropdown-item confirm"
                                                    @click="fetchUpdateBoard()"
                                                    style="color: var(--success)">
                                                Bestätigen
                                            </button>
                                            <button class="dropdown-item"
                                                    @click="isRenaming = false"
                                                    style="color: var(--error)">
                                                Abbrechen
                                            </button>
                                        </div>
                                    </div>

                                </div>


                                <a hx-post=`/boards?boardId=${board.boardID}`
                                   hx-push-url=`/boards?boardId=${board.boardID}`
                                   hx-swap="outerHTML"
                                   hx-target=`.board-container`
                                >
                                    Zum Board
                                </a>
                            </div>))))}

                    <!-- Card Input Section Modified -->
                    <div class="board-card add-board"
                         x-show="!showCardInput"
                         x-cloak
                         @click="showCardInput = true">
                        <div class="add-content">
                            <i class="fas fa-plus"></i>
                            <span>Neues Board anlegen</span>
                        </div>
                    </div>

                    <div class="board-card" x-show="showCardInput" x-cloak>
                        <div class="input-group">
                            <input
                                    type="text"
                                    x-model="boardName"
                                    @keyup.enter="createBoard()"
                                    placeholder="Board-Name"
                                    class="board-input"
                                    autofocus
                            />
                            <div class="button-group">
                                <button @click="createBoard()" class="submit-btn">
                                    Erstellen
                                </button>
                                <button @click="showCardInput = false; boardName = ''"
                                        class="cancel-btn">
                                    Abbrechen
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>) : (
            <main class="content" x-data="{ showProjectBoard: false }">
                <div class="main" id="main">
                    <!-- ProjectBoard shown by default -->
                    <div class="board scrollable" x-show="!showProjectBoard">
                        <ProjectBoard boardID={boardIdParam}/>
                    </div>

                    <!-- TaskBoard shown when toggled -->
                    <div class="board scrollable"
                         x-show="showProjectBoard"
                         x-cloak>
                        <TaskBoard boardID={boardIdParam}/>
                    </div>
                </div>
            </main>)}
</div>

<script>
    import 'htmx.org';
    import Alpine from 'alpinejs';
    import {serverURL} from "./conf";


    Alpine.data('boardCreation', () => ({
        showHeaderInput: false, showCardInput: false, boardName: '', async createBoard() {
            if (!this.boardName.trim()) return;
            try {
                const response = await fetch(`${serverURL}/boards/add/`, {
                    method: 'POST', headers: {'Content-Type': 'application/json'}, body: JSON.stringify({
                        sessionId: sessionId, boardName: this.boardName
                    })
                });

                if (response.ok) {
                    const result = await response.json();
                    const insertId = result.data.insertId;

                    window.location.href = "/boards?boardId=" + insertId;
                } else {
                    console.error('Board creation failed');
                }
            } catch (error) {
                console.error('Error:', error);
            }
        }
    }));

    Alpine.start();

    import {sessionId} from './user.js';

    if (document.cookie.includes('sessionId') === null) {
        window.location.href = `/getCookies`;
    }

    if (sessionId === null) {
        window.location.href = `/login`;
    }

</script>
</body>
</html>