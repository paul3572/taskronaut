---
import Task from './project.astro';
import {serverURL} from '../../pages/conf.js';

let sessionId = Astro.cookies.get('sessionId').value;
const {boardID} = Astro.props;

// Fetch tasks
const responseTasks = await fetch(`${serverURL}/tasks/get/byBoard`, {
    method: 'POST',
    headers: {'Content-Type': 'application/json'},
    body: JSON.stringify({sessionId: sessionId, boardId: boardID}),
});
const {data: tasks} = await responseTasks.json();

// Fetch lists
const responseLists = await fetch(`${serverURL}/lists/lists/board/`, {
    method: 'POST',
    headers: {'Content-Type': 'application/json'},
    body: JSON.stringify({sessionId: sessionId, boardId: boardID}),
});
const {data: lists} = await responseLists.json();
---
<div class="dragAndDrop"
     x-data="{
        sessionId: document.cookie.split('; ').find(row => row.startsWith('sessionId=')).split('=')[1],
        userId: sessionStorage.getItem('userId'),
        showForm: false,
        showButton: true,
        listName: '',
        init() {
          this.$watch('showForm', value => {
            if (value) {
              this.showButton = false;
            } else {
              setTimeout(() => { this.showButton = true; }, 90);
            }
          });
        }
      }">
    {lists && lists.length === 0 ? (
            <hr style="width: 0; margin: 0">) : (
            <>
                {lists && lists.map(list => (
                        <div class="list"
                             id={`list-${list.listID}`}
                             x-data=`{
              isDropdownOpen: false,
              isRenaming: false,
              originalListName: "${list.listName}",
              newListName: "${list.listName}",
              fetchUpdateList() {
                if (!this.newListName.trim()) return;
                fetch('${serverURL}/lists/update', {
                  method: 'PATCH',
                  headers: { 'Content-Type': 'application/json' },
                  body: JSON.stringify({
                    sessionId: '${sessionId}',
                    listId: '${list.listID}',
                    listName: this.newListName
                  })
                }).then(() => window.location.reload());
                this.isRenaming = false;
              },
              handleDrop(event) {
                event.preventDefault();
                const taskId = event.dataTransfer.getData('text/plain');
                fetch('${serverURL}/dragANDdrop/list', {
                  method: 'PATCH',
                  headers: { 'Content-Type': 'application/json' },
                  body: JSON.stringify({
                    sessionID: '${sessionId}',
                    taskID: taskId,
                    listID: '${list.listID}'
                  })
                }).then(() => window.location.reload());
              }
            }`
                             @dragover.prevent
                             @drop="handleDrop($event)">
                            <div class="list-header">
                                <h2>{list.listName}</h2>
                                <div class="dropdown-container">
                                    <button class="dropdown-trigger" @click="isDropdownOpen = !isDropdownOpen">
                                        <i class="fas fa-ellipsis-v"></i>
                                    </button>
                                    <div class="dropdown-menu" x-show="isDropdownOpen" x-cloak
                                         @click.away="isDropdownOpen = false">
                                        <div x-show="!isRenaming">
                                            <button class="dropdown-item"
                                                    @click="isRenaming = true; newListName = originalListName">
                                                Umbenennen
                                            </button>
                                            <button class="dropdown-item delete"
                                                    hx-delete=`${serverURL}/lists/delete`
                                                    hx-headers='{"Content-Type": "application/json"}'
                                                    hx-vals=`js:{ sessionId: "${sessionId}", listId: "${list.listID}" }`
                                                    hx-trigger="click"
                                                    hx-swap="delete"
                                                    hx-target=`#list-${list.listID}`>
                                                Löschen
                                            </button>
                                        </div>
                                        <div x-show="isRenaming" class="rename-form">
                                            <input type="text" x-model="newListName" class="rename-input" autofocus>
                                            <div class="rename-buttons">
                                                <button class="dropdown-item confirm" @click="fetchUpdateList()"
                                                        style="color: var(--success)">
                                                    Bestätigen
                                                </button>
                                                <button class="dropdown-item" @click="isRenaming = false"
                                                        style="color: var(--error)">
                                                    Abbrechen
                                                </button>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <Task listID={list.listID} tasks={tasks} boardID={boardID}></Task>
                        </div>))}
            </>)}

    <div class="add-list" x-data=`{
    showInput: false,
    taskData: { listName: "", userId: userId },
    toggleInput() { this.showInput = !this.showInput; },
    saveList() {
      if (this.taskData.listName.trim() !== "") {
        fetch("${serverURL}/lists/lists", {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({ 
            sessionId: sessionId.replace(/"/g, ''), 
            boardId: ${boardID},
            listName: this.taskData.listName 
          })
        }).then(() => window.location.reload());
      }
    },
    cancelList() {
      this.showInput = false;
      this.taskData.listName = "";
    }
  }`>
        <button @click="showForm = true" x-show="showButton" class="add-list-button">
            + Liste Erstellen
        </button>
        <div x-show="showForm" x-cloak x-transition>
            <input type="text" placeholder="Name der Liste" x-model="taskData.listName" class="list-name-input"/>
            <div class="save-list-space">
                <button @click="saveList" class="submit-list-button">Liste Speichern</button>
                <button @click="showForm = false" class="cancel-list-button">&#10006</button>
            </div>
        </div>
    </div>
</div>

<style>
    .list-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
    }

    .dropdown-container {
        position: relative;
        display: inline-block;
    }

    .dropdown-trigger {
        background: none;
        border: none;
        cursor: pointer;
        color: #999;
        padding: 4px 0;
        border-radius: 4px;
        transition: background 0.2s;
        font-size: larger;
        transform: translateY(-20%);
    }

    .dropdown-trigger:hover {
        background: var(--foreground);
    }

    .dropdown-menu {
        position: fixed;
        transform: translate(-50%, 5px);
        background: var(--background);
        border: 1px solid var(--border);
        border-radius: 4px;
        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
        z-index: 1000;
        min-width: 160px;
        padding: 6px 0;
    }

    .dropdown-item {
        display: block;
        width: 100%;
        padding: 8px 16px;
        background: none;
        border: none;
        text-align: left;
        cursor: pointer;
        font-size: 14px;
        color: var(--copy);
        transition: background 0.2s;
    }

    .dropdown-item:hover {
        background: var(--foreground);
    }

    .dropdown-item.delete {
        color: var(--error);
    }

    .list {
        overflow: visible !important;
        min-height: 100px;
        transition: background 0.2s;
    }

    .list.drag-over {
        background: var(--foreground);
    }
</style>