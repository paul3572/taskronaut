---
import Task from './project.astro';

import {serverURL} from '../../pages/conf.js';

let sessionId = Astro.cookies.get('sessionId').value;




const responseTasks = await fetch(`${serverURL}/tasks/tasks/user/`, {
    method: 'POST', headers: {
        'Content-Type': 'application/json'
    }, body: JSON.stringify({sessionId: sessionId})
});


const {data: tasks} = await responseTasks.json();
let taskList = [];
for (let task of tasks) {
    for (let key of task) {
        taskList.push(key);
    }
}

const {boardID} = Astro.props;

const responseLists = await fetch(`${serverURL}/lists/lists/board/`, {
    method: 'POST', headers: {
        'Content-Type': 'application/json'
    }, body: JSON.stringify({sessionId: sessionId, boardId: boardID})
});


const {data: lists} = await responseLists.json();
---

<div class="dragAndDrop"
     x-data="{
        sessionId: document.cookie.split('; ').find(row => row.startsWith('sessionId=')).split('=')[1],
        userId: sessionStorage.getItem('userId')
      }">
    {lists && lists.length === 0 ? (
    <hr style="width: 0; margin: 0">) : (
        <>
            {lists && lists.map(list => (
            <div
                            class="list"
                            id={`list-${list.listID}`}
                    >

                        <div class="list-header">
                            <h2>{list.listName}</h2>
                            <button class="animated-delete-button"
                                    hx-delete={`${serverURL}/lists/lists/${list.listID}`}
                                    hx-target={`#list-${list.listID}`}
                                    hx-swap="delete">
                                <svg
                                        xmlns="http://www.w3.org/2000/svg"
                                        fill="none"
                                        viewBox="0 0 69 14"
                                        class="svgIcon bin-top"
                                >
                                    <g clip-path="url(#clip0_35_24)">
                                        <path
                                                fill="black"
                                                d="M20.8232 2.62734L19.9948 4.21304C19.8224 4.54309 19.4808 4.75 19.1085 4.75H4.92857C2.20246 4.75 0 6.87266 0 9.5C0 12.1273 2.20246 14.25 4.92857 14.25H64.0714C66.7975 14.25 69 12.1273 69 9.5C69 6.87266 66.7975 4.75 64.0714 4.75H49.8915C49.5192 4.75 49.1776 4.54309 49.0052 4.21305L48.1768 2.62734C47.3451 1.00938 45.6355 0 43.7719 0H25.2281C23.3645 0 21.6549 1.00938 20.8232 2.62734ZM64.0023 20.0648C64.0397 19.4882 63.5822 19 63.0044 19H5.99556C5.4178 19 4.96025 19.4882 4.99766 20.0648L8.19375 69.3203C8.44018 73.0758 11.6746 76 15.5712 76H53.4288C57.3254 76 60.5598 73.0758 60.8062 69.3203L64.0023 20.0648Z"
                                        ></path>
                                    </g>
                                    <defs>
                                        <clipPath id="clip0_35_24">
                                            <rect fill="white" height="14" width="69"></rect>
                                        </clipPath>
                                    </defs>
                                </svg>

                                <svg
                                        xmlns="http://www.w3.org/2000/svg"
                                        fill="none"
                                        viewBox="0 0 69 57"
                                        class="svgIcon bin-bottom"
                                >
                                    <g clip-path="url(#clip0_35_22)">
                                        <path
                                                fill="black"
                                                d="M20.8232 -16.3727L19.9948 -14.787C19.8224 -14.4569 19.4808 -14.25 19.1085 -14.25H4.92857C2.20246 -14.25 0 -12.1273 0 -9.5C0 -6.8727 2.20246 -4.75 4.92857 -4.75H64.0714C66.7975 -4.75 69 -6.8727 69 -9.5C69 -12.1273 66.7975 -14.25 64.0714 -14.25H49.8915C49.5192 -14.25 49.1776 -14.4569 49.0052 -14.787L48.1768 -16.3727C47.3451 -17.9906 45.6355 -19 43.7719 -19H25.2281C23.3645 -19 21.6549 -17.9906 20.8232 -16.3727ZM64.0023 1.0648C64.0397 0.4882 63.5822 0 63.0044 0H5.99556C5.4178 0 4.96025 0.4882 4.99766 1.0648L8.19375 50.3203C8.44018 54.0758 11.6746 57 15.5712 57H53.4288C57.3254 57 60.5598 54.0758 60.8062 50.3203L64.0023 1.0648Z"
                                        ></path>
                                    </g>
                                    <defs>
                                        <clipPath id="clip0_35_22">
                                            <rect fill="white" height="57" width="69"></rect>
                                        </clipPath>
                                    </defs>
                                </svg>
                            </button>
                        </div>


                        <Task listID={list.listID} tasks={taskList} boardID={boardID}></Task>
                    </div>

            ))}
        </>)}
    <script>
        import {sessionId} from '../../pages/user.js';

    </script>
    <div class="add-list" x-data=`{
        showInput: false,
        taskData: { listName: "", userId: userId },
        toggleInput() {
            this.showInput = !this.showInput;
        },
        saveList() {
            if (this.taskData.listName.trim() !== "") {
                fetch("${serverURL}/lists/lists", {
                method: "POST",
                headers: {
                    "Content-Type": "application/json"
                },
                body: JSON.stringify({ 
                    sessionId: sessionId.replace(/"/g, ''), 
                    boardId: ${boardID},
                    listName: this.taskData.listName 
                })
                }).then(() => {
                    window.location.reload();
                });
            }
        },
        cancelList() {
            this.showInput = false;
            this.taskData.listName = "";
        },
        showForm: false,
        showButton: true,
        init() {
          this.$watch('showForm', value => {
            if (value) {
              this.showButton = false;
            } else {
              setTimeout(() => { this.showButton = true; }, 90);
            }
          });
        }
    }`>

        <!-- Button for creating a list -->
        <button
                @click="showForm = true"
                x-show="showButton"
                class="add-list-button">
            + Liste Erstellen
        </button>

        <!-- Input field and buttons for list creation -->
        <div x-show="showForm" x-cloak x-transition>
            <input
                    type="text"
                    placeholder="Name der Liste"
                    x-model="taskData.listName"
                    class="list-name-input"
            />
            <div class="save-list-space">
                <button @click="saveList" class="submit-list-button">
                    Liste Speichern
                </button>
                <button @click="showForm = false"
                        class="cancel-list-button">
                    &#10006
                </button>
            </div>
        </div>
    </div>
</div>