---
import {serverURL} from "../../pages/conf.js";
import TaskDetails from "../taskBoard/taskDetails.astro";
const {boardID, listID, tasks} = Astro.props;

// Filter tasks matching the current listID
const listTasks = tasks.filter(task => task.listID === listID, boardID);
---

<div
        x-data="{
    sessionId: sessionStorage.getItem('sessionID').slice(1, -1),
    userId: sessionStorage.getItem('userId')
}">
    {listTasks.length === 0 ? (
            <></>) : (
            <>
                {listTasks.map(task => (
                        <div
                                x-data="{ openDetails: false }"
                                id={`task-${task.taskID}`}
                        >

                            <div
                                    class="task"
                                    draggable="true"
                                    @dragstart={`event.dataTransfer.setData('text/plain', "${task.taskID}")`}

                            >
                                <div @click="openDetails = !openDetails" style="flex-direction: column">
                                    <div class={`task-status status-${task.taskStatus}`}
                                         style="float: left; height: 70px; width: 2%;"/>
                                    <div style="width: 95%; float: right;">
                                        <h3>{task.taskName}</h3>
                                        {task.dueDate && <p style="margin-bottom: 1px">F채llig
                                            am: {new Date(task.dueDate).toLocaleDateString()}</p>}
                                        <p>Priorit채t: {task.priorities}/5</p>
                                    </div>
                                </div>

                            </div>

                            <div x-show="openDetails" @click.away="openDetails = false" class="dropdown">
                                <TaskDetails task={task}/>
                            </div>


                        </div>

                ))}
            </>
        )}

        <div x-data=`{
        taskData: {
            sessionId: sessionId,
            taskName: '',
            listID: '${listID}',
            boardID: '${boardID}'
        },

        showForm: false,
        boardName: '',
        showButton: true,
        init() {
        // Watch for changes to showForm. When it closes, delay re-showing the button.
                  this.$watch('showForm', value => {
        if (value) {
            this.showButton = false;
            } else {
            // Delay showing the button until the transition is complete (e.g. 300ms)
                  setTimeout(() => { this.showButton = true; }, 100);
            }
        });
        }

    }`>
            <button
                    x-show="showButton"
                    @click="showForm = true"
                    class="add-task-button">
                + Aufgabe hinzuf체gen
            </button>

            <div x-show="showForm" x-transition class="task-input">
                <label x-cloak>
                    Aufgabenname
                    <input type="text"
                           x-model="taskData.taskName"
                           placeholder="Aufgabenname"
                           class="task-name-input"
                           x-cloak
                           x-transition
                    />
                </label>
                <button
                        x-cloak
                        x-transition
                        @click=`
                        if (taskData.taskName.trim()) {
                            fetch("${serverURL}/tasks/add", {
                                method: 'POST',
                                headers: { 'Content-Type': 'application/json' },
                                body: JSON.stringify(taskData)
                            }).then(() => {
                                window.location.reload();
                            });
                            showForm = false;
                        } else {
                            alert('Bitte geben Sie einen Namen f체r die Aufgabe ein');
                        }
                    `
                        class="submit-task-button">
                    + Aufgabe erstellen
                </button>
                <button @click="showForm = false; taskData.taskName = ''"
                        class="cancel-task-button"
                        x-cloak
                        x-transition>
                    &#10006;
                </button>
            </div>
        </div>
        </div>