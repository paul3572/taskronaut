---
import {serverURL} from "../pages/conf.js";

let sessionId = Astro.cookies.get('sessionId').value;
let {boardId} = Astro.props;
let localFullName = Astro.cookies.get('user').value;

console.log("Board ID:" + boardId);

const response = await fetch(`${serverURL}/boardChat/view`, {
    method: 'POST',
    headers: {
        'Content-Type': 'application/json'
    },
    body: JSON.stringify({sessionId: sessionId, boardId: boardId})
});

const {data: messages} = await response.json();

console.log("Chat Messages:")
console.log(messages);
---
<div class="ptp" style="display: block">
    <button class="close" style="right: 0; top: 0" @click="showChat = false">X</button>
    <div id="messages" class="ptp-messages">
        {messages.flat().sort((a, b) => new Date(a.timestamp) - new Date(b.timestamp)).map((msg) => {
            const isOwn = msg.senderID === `${localFullName}`;

            return (
                    <div class={`message ${isOwn ? 'message-own' : 'message-other'}`}>
                        <div class="message-sender">{isOwn ? 'Du' : msg.senderID}</div>
                        <div class="message-content">{msg.message}</div>
                    </div>
            )
        })}
    </div>
    <div class="ptp-input"
         x-data=`{
            messageData: {
                message: '',
            }
        }`
    >
        <input placeholder="Schreibe eine Nachricht..."
               type="text"
               x-model="messageData.message"/>
        <button
                @click=`
                fetch('${serverURL}/boardChat/send', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({
                        sessionId: "${sessionId}",
                        boardId: "${boardId}",
                        message: messageData.message
                    })
                }).then(() => {
                    window.location.reload();
                });
            `
        >Senden</button>
    </div>
</div>

<style>
    .ptp {
        position: absolute;
        display: flex;
        flex-direction: column;
        height: 90vh;
        width: 30vw;
        min-width: 300px;
        z-index: 100;
        top: 20px;
        right: 5px;
        background-color: var(--foreground);
        padding: 15px;
        border: var(--border);
        border-style: solid;
        border-radius: 15px;
    }

    .ptp-messages-container {
        flex-grow: 1;
        overflow-y: auto;
        padding: 10px;
        margin-bottom: 15px;
    }

    .ptp-messages {
        display: flex;
        height: 83vh;
        flex-direction: column;
        gap: 12px;
        min-height: min-content;
        overflow-y: scroll;
    }

    .message {
        max-width: 75%;
        padding: 8px 12px;
        border-radius: 15px;
    }

    .message-own {
        align-self: flex-end;
        background-color: var(--primary);
        color: white;
    }

    .message-other {
        align-self: flex-start;
        background-color: var(--background);
        color: var(--copy);
        border: 1px solid var(--border);
    }

    .message-sender {
        font-size: 0.75rem;
        font-weight: 500;
        margin-bottom: 4px;
        color: var(--copy-light);
    }

    .ptp-input {
        flex-shrink: 0;
        display: flex;
        gap: 10px;
        margin-top: 5px;
        padding-top: 10px;
        border-top: 1px solid var(--border);
    }

    /* Scrollbar styling */
    .ptp-messages::-webkit-scrollbar {
        width: 8px;
    }

    .ptp-messages::-webkit-scrollbar-track {
        background: var(--border);
    }

    .ptp-messages::-webkit-scrollbar-thumb {
        background-color: var(--primary);
        border-radius: 4px;
    }
</style>